using CoffeeShop.Models;
using Microsoft.EntityFrameworkCore;
using System.Globalization;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllersWithViews().AddNewtonsoftJson();

// K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
builder.Services.AddDbContext<CoffeeShopDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

// ‚úÖ C·∫•u h√¨nh session ƒë√∫ng c√°ch
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(30);           // Th·ªùi gian t·ªìn t·∫°i c·ªßa session
    options.Cookie.HttpOnly = true;                            // NgƒÉn ch·∫∑n JavaScript ƒë·ªçc cookie
    options.Cookie.IsEssential = true;                         // Cookie v·∫´n ho·∫°t ƒë·ªông trong ch·∫ø ƒë·ªô privacy cao
});

builder.Services.AddHttpContextAccessor();

var app = builder.Build();

// ‚úÖ ƒê·∫∑t ƒë·ªãnh d·∫°ng m·∫∑c ƒë·ªãnh l√† ti·∫øng Vi·ªát
var cultureInfo = new CultureInfo("vi-VN");
CultureInfo.DefaultThreadCurrentCulture = cultureInfo;
CultureInfo.DefaultThreadCurrentUICulture = cultureInfo;

// Configure middleware
app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseSession(); // üî• Lu√¥n ƒë·∫∑t tr∆∞·ªõc Auth, Middleware, v.v.

app.UseMiddleware<CoffeeShop.Middlewares.AuthRedirectMiddleware>();

app.UseAuthorization();

// ƒê·ªãnh tuy·∫øn
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

// ‚úÖ G·ªçi seed d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var context = services.GetRequiredService<CoffeeShopDbContext>();

    if (!context.Products.Any())
    {
        SeedData.Initialize(services);
    }
}

app.Run();
